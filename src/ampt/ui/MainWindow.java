/*
 * MainWindow.java
 *
 * Created on Oct 21, 2009, 10:46:35 AM
 */
package ampt.ui;

import ampt.ui.canvas.KeyboardBox;
import ampt.ui.canvas.MidiDeviceBox;
import ampt.ui.canvas.MidiDeviceButton;
import ampt.ui.keyboard.KeyboardDevice;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiDevice.Info;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.swing.JFrame;

/**
 * This is the main window for the GUI.  It contains a split pane, in which the
 * top contains any tabs that are desired, such as the canvas and the software
 * keyboard.  The bottom contains a console for any desired output.
 *
 * @author Christopher Redding
 */
public class MainWindow extends JFrame {

    /*
     * This is used for listening for the user clicking on the canvas panel so
     * the user can place a filter after choosing the filter from the Toolbar.
     *
     * NOTE: For some reason, Netbeans places all of the class variables at the
     * bottom of the file, so look there for any other variables you want to
     * see.
     */
    private MouseAdapter canvasButtonMouseAdapter = null;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     *
     * I have modified this method to insert all of the devices obtained from
     * calling MidiSystem.getDeviceInfo() as a button in the toolbar.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasToolbar1 = new ampt.ui.canvas.CanvasToolbar();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        canvasToolbar2 = new ampt.ui.canvas.CanvasToolbar();
        filterPropertiesPanel1 = new ampt.ui.canvas.FilterPropertiesPanel();
        jPanel2 = new javax.swing.JPanel();
        canvasPanel1 = new ampt.ui.canvas.CanvasPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        canvasToolbar1.setRollover(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Additive MIDI Performance Tool");

        jSplitPane1.setBorder(null);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);

        canvasToolbar2.setBorder(javax.swing.BorderFactory.createTitledBorder("Canvas Toolbar"));
        canvasToolbar2.setFloatable(false);
        canvasToolbar2.setOrientation(1);
        canvasToolbar2.setRollover(true);

        Info[] deviceInfos = MidiSystem.getMidiDeviceInfo();
        for(Info deviceInfo: deviceInfos){
            MidiDeviceButton button = new MidiDeviceButton(deviceInfo);
            canvasToolbar2.add(button);
            button.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ButtonHandler(evt);
                }
            });
        }

        //ChordFilterButton chordButton = new ChordFilterButton();
        //canvasToolbar2.add(chordButton);
        //chordButton.addActionListener(new java.awt.event.ActionListener() {
            //            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //                ButtonHandler(evt);
                //            }
            //        });

    filterPropertiesPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter Properties"));

    javax.swing.GroupLayout filterPropertiesPanel1Layout = new javax.swing.GroupLayout(filterPropertiesPanel1);
    filterPropertiesPanel1.setLayout(filterPropertiesPanel1Layout);
    filterPropertiesPanel1Layout.setHorizontalGroup(
        filterPropertiesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 102, Short.MAX_VALUE)
    );
    filterPropertiesPanel1Layout.setVerticalGroup(
        filterPropertiesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 186, Short.MAX_VALUE)
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Canvas"));

    canvasPanel1.setBackground(new java.awt.Color(255, 255, 255));

    javax.swing.GroupLayout canvasPanel1Layout = new javax.swing.GroupLayout(canvasPanel1);
    canvasPanel1.setLayout(canvasPanel1Layout);
    canvasPanel1Layout.setHorizontalGroup(
        canvasPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 307, Short.MAX_VALUE)
    );
    canvasPanel1Layout.setVerticalGroup(
        canvasPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 175, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(canvasPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(canvasPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(canvasToolbar2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(filterPropertiesPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(canvasToolbar2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        .addComponent(filterPropertiesPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    jTabbedPane1.addTab("Canvas", jPanel1);

    jSplitPane1.setLeftComponent(jTabbedPane1);

    jScrollPane1.setPreferredSize(new java.awt.Dimension(24, 200));

    jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));
    jTextPane1.setEditable(false);
    jScrollPane1.setViewportView(jTextPane1);

    jSplitPane1.setRightComponent(jScrollPane1);

    jMenu1.setText("File");
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Edit");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    /**
     * A button handler for all of the buttons on the toolbar.  This method
     * registers a mouse adapter on the canvas so the box that represents a
     * MidiDevice or a filter can be placed on the canvas.
     * @param evt
     */
    private void ButtonHandler(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        final Object source = evt.getSource();
        if (canvasButtonMouseAdapter != null) {
            canvasPanel1.removeMouseListener(canvasButtonMouseAdapter);
        }

        canvasButtonMouseAdapter = new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                canvasPanel1.removeMouseListener(this);
                Point point = e.getPoint();
                if (source instanceof MidiDeviceButton) {
                    MidiDeviceButton deviceButton = (MidiDeviceButton) source;
                    try{
                        MidiDevice device = MidiSystem.getMidiDevice(deviceButton.getDeviceInfo());
                        MidiDeviceBox box = null;
                        if(device instanceof KeyboardDevice){
                            KeyboardDevice keyboard = (KeyboardDevice) device;
                            box = new KeyboardBox(keyboard);
                        } else {
                            box = new MidiDeviceBox(device);
                        }
                        canvasPanel1.add(box);
                        box.setLocation(point);
                        box.setSize(box.getPreferredSize());
                        box.validate();
//                        if (box.getMidiDevice() instanceof KeyboardDevice) {
//                            KeyboardPanel keyboard = new KeyboardPanel((KeyboardDevice) box.getMidiDevice());
//                            jTabbedPane1.addTab("Keyboard", keyboard);
//                        }
                    } catch (MidiUnavailableException ex){
                        ex.printStackTrace();
                    }
                    canvasPanel1.repaint();
                }
            }
        };
        canvasPanel1.addMouseListener(canvasButtonMouseAdapter);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ampt.ui.canvas.CanvasPanel canvasPanel1;
    private ampt.ui.canvas.CanvasToolbar canvasToolbar1;
    private ampt.ui.canvas.CanvasToolbar canvasToolbar2;
    private ampt.ui.canvas.FilterPropertiesPanel filterPropertiesPanel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
